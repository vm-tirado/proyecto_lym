/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(Proyecto)
package Proyecto;

import java.util.*;
public class Proyecto
{
    static ArrayList<String> transiciones= new ArrayList<String >();
    static ArrayList<String> sitios = new ArrayList<String >();
}

PARSER_END(Proyecto)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < PARENTESIS_CERRADO: ")">
| < PARENTESIS_ABIERTO: "(">
| < DOS_PUNTOS: ":">
| < DOS_PUNTOS_IGUAL:":=">
| < IGUAL:"=">

}

TOKEN :
{
  <P_RED:"P_RED">
| <VAR:"VAR">
| <SITIO:"SITIO">
| <ARCO:"ARCO" >
| <TRANSICION:"TRANSICION" >
| <UNIFORME:"Uniforme" >
| <EXPONENCIAL:"Exponencial" >
| <DETERMINISTICO :"Deteministico">
| < capacidad:"capacidad">
|  <FIN_RED:"FIN_RED" >
|  < marcacion_i:"marcacion_i">
|  <#DIGITO: ["0"-"9"] >
|  <NUMERO:(< DIGITO >)+ >
|  <#LETRA: ["a"-"z"]|["A"-"Z"] >
|  < PALABRA:(< LETRA >)+ >
|  <COMA:",">


}

void one_line() throws Exception:
{}
{
	< P_RED > < PALABRA >contenido() < FIN_RED >
}

void contenido() throws Exception:
{}
{
	(declaracionVariable())*
	(declaracionSitio())*
	(declaracionTransicion())*
	(declaracionArco())*
}
void declaracionVariable():
{}
{
	<VAR > < PALABRA>< IGUAL> < NUMERO>
}
void declaracionSitio():
{
  Token sitio;
}
{
	<SITIO >< DOS_PUNTOS>sitio= < PALABRA>
		( < capacidad>< DOS_PUNTOS_IGUAL> < NUMERO> )?
		< marcacion_i><DOS_PUNTOS_IGUAL >< NUMERO>
		{
		  sitios.add(sitio.image);
		  System.out.println("añadio a s "+sitio.image);
		}
}
void declaracionTransicion():
{
  Token trans;
}
{
	<TRANSICION> (transicionTipo1()|transicionTipo2())	
}
void transicionTipo1():
{
  Token trans;
}
{
  trans=< PALABRA>
  {
    transiciones.add(trans.image);
    System.out.println("añadio a t "+trans.image);
  }
}
void transicionTipo2():
 {
   Token trans;
 } {
  < PARENTESIS_ABIERTO> trans=< PALABRA>< COMA>(transicionUniforme()|transicionExponencial()|transicionDeterministico()) < PARENTESIS_CERRADO>
   {
    transiciones.add(trans.image);
    System.out.println("añadio a t "+trans.image);
  }
}
void transicionUniforme(): { } {
	<UNIFORME >< COMA>< NUMERO>< COMA>< NUMERO>
}
void transicionExponencial(): { } {
	<EXPONENCIAL >< COMA>< NUMERO>< COMA>< NUMERO>
}
void transicionDeterministico(): { } {
	<DETERMINISTICO >< COMA>< NUMERO>
}
void declaracionArco() throws Exception:
 {
   Token nom1;
   Token nom2;
 }
 {
	< ARCO>< PARENTESIS_ABIERTO> nom1=< PALABRA>< COMA>nom2=< PALABRA>(< COMA>< NUMERO>)?< PARENTESIS_CERRADO>
	{

    boolean sit1=false;
    for (int i =0; i<sitios.size() && !sit1; i++)
    {
      if (sitios.get(i).equals(nom1.image))
      {
        sit1 =true;
      }
    }
    boolean sit2=false;
    for (int i =0; i<sitios.size() && !sit2; i++)
    {
      if (sitios.get(i).equals(nom2.image))
      {
        sit2 =true;
      }
    }

    boolean tr1=false;
    for (int i =0; i<transiciones.size() && !tr1; i++)
    {
      if (transiciones.get(i).equals(nom1.image))
      {
        tr1 =true;
      }
    }
    boolean tr2=false;
    for (int i =0; i<transiciones.size() && !tr2; i++)
    {
      if (transiciones.get(i).equals(nom2.image))
      {
        tr2 =true;
      }
    }

	  if (sit2 && sit1 )
	  {
	    throw new Exception ("No se puede hacer un arco entre dos sitios");
	  }
	  else if (tr1 && tr2)
	  {
	    throw new Exception ("No se puede hacer un arco entre dos transiciones");
	  }
	  else if (!sit1 && !tr1)
	  {
	    throw new Exception ("No existe una transicion o sitio con el nombre "+ nom1.image);
	  }

	  	  else if (!sit2 && tr2 )
	  {
	    throw new Exception ("No existe una transicion o sitio con el nombre "+ nom2.image);
	  }
	}
}